syntax = "proto3";
option csharp_namespace = "BlazorWasmGrpcBlog.Shared.Protos";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
package blogproto;

service BlogProto{
	rpc GetPosts(google.protobuf.Empty) returns (Posts);
	rpc GetPost(GetPostQuery) returns (Post);
	rpc GetAuthors(google.protobuf.Empty) returns (Authors);
	rpc GetAuthor(GetAuthorQuery) returns (Author);
}

message Author {
	int32 author_id = 1;
	string name = 2;
	string date_created = 3; // DateTime (UTC) string because of SQLite
	// repeated Post author_posts_data = 4; // Author with many Posts. TODO: Doesn't work. ReferenceLoopHandling like in Newtonsoft.Json? 'message Post' does have 'Author'.
}
message Authors {
	repeated Author authors_data = 1;
}

message Post { // For Public Access
	int32 post_id = 1;
	int32 author_id = 2;
	string title = 3;
	string date_created = 4; // DateTime (UTC) string because of SQLite
	PostStatus post_stat = 5; // enum
	PostExtended post_ext = 6; // one to one
	Author post_author = 7; // Post with one author, one to one
	repeated Tag tags_in_post_data = 8; // Post with many Tags
}
message Posts {
	repeated Post posts_data = 1;
}

/*
	Many to Many Tags in auto generated table "PostsTags" 
	EF Core auto generates 'PostTag' table, Renaming it to 'PostsTags' is done in ApplicationDbContext

	Because of "message Post" with "repeated Tag tags_data"
	and "message Tag" with "repeated Post posts_data"
	EF Core creates "PostTag" table 'automagically'.
*/

message Tag {
	//string tag_id = 1; // Tag itself: string
	int32 tag_id = 1;
	string name = 2;
	repeated Post posts_in_tag_data = 3; // Tag with many Posts
}
message Tags {
	repeated Tag tags_data = 1;
}

/*
	TODO: Don't know how to use DTOs with gRPC yet. For a list (table) view I do not
	want to transfer all post data (i.e.: content) over the wire. I need that data
	only for view/edit/update.

	That's why this is temp solution with 'PostExtended'
*/

message PostExtended { // Extra Post Info For Authorized (Roles) Access  i.e. Moderators/Admins
	int32 post_id = 1; // Same key as Post, see ApplicationsDbContext.cs -> modelBuilder.Entity<PostExtended>() -> HasKey & ValueGeneratedNever
	string content = 2; // Blogpost itself, should be accessible without authorization
	google.protobuf.Timestamp Ts = 3; // Just to use google.protobuf.Timestamp with a EFCore valueconverter, see tsConverter in ApplicationsDbContext.cs
	// etc. etc.
}

enum PostStatus {
	POST_STATUS_HIDDEN = 0; // Default, must be 0.
	POST_STATUS_PUBLISHED = 1;
	POST_STATUS_DELETED = 2;
}

message GetPostQuery {
	int32 id = 1;
}

message GetAuthorQuery {
	int32 id = 1;
}
